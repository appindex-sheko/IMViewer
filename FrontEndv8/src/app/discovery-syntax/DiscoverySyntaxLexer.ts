// Generated from ./src/app/discovery-syntax/DiscoverySyntax.g4 by ANTLR 4.6-SNAPSHOT


import { ATN } from 'antlr4ts/atn/ATN';
import { ATNDeserializer } from 'antlr4ts/atn/ATNDeserializer';
import { CharStream } from 'antlr4ts/CharStream';
import { Lexer } from 'antlr4ts/Lexer';
import { LexerATNSimulator } from 'antlr4ts/atn/LexerATNSimulator';
import { NotNull } from 'antlr4ts/Decorators';
import { Override } from 'antlr4ts/Decorators';
import { RuleContext } from 'antlr4ts/RuleContext';
import { Vocabulary } from 'antlr4ts/Vocabulary';
import { VocabularyImpl } from 'antlr4ts/VocabularyImpl';

import * as Utils from 'antlr4ts/misc/Utils';


export class DiscoverySyntaxLexer extends Lexer {
	public static readonly SUBCLASSOF=1;
	public static readonly COMMA=2;
	public static readonly OPENBRACKET=3;
	public static readonly CLOSEBRACKET=4;
	public static readonly AND=5;
	public static readonly OR=6;
	public static readonly NOT=7;
	public static readonly EQUALS=8;
	public static readonly PROPERTYSTART=9;
	public static readonly IRI=10;
	public static readonly QUANTIFICATION=11;
	public static readonly STRING=12;
	public static readonly WS=13;
	public static readonly modeNames: string[] = [
		"DEFAULT_MODE"
	];

	public static readonly ruleNames: string[] = [
		"SUBCLASSOF", "COMMA", "OPENBRACKET", "CLOSEBRACKET", "AND", "OR", "NOT", 
		"EQUALS", "PROPERTYSTART", "IRI", "QUANTIFICATION", "STRING", "WS"
	];

	private static readonly _LITERAL_NAMES: (string | undefined)[] = [
		undefined, "'SubClassOf '", "','", "'('", "')'", "' AND '", "' OR '", 
		"'!'", "' = '", "'PROPERTY('", undefined, "'some '"
	];
	private static readonly _SYMBOLIC_NAMES: (string | undefined)[] = [
		undefined, "SUBCLASSOF", "COMMA", "OPENBRACKET", "CLOSEBRACKET", "AND", 
		"OR", "NOT", "EQUALS", "PROPERTYSTART", "IRI", "QUANTIFICATION", "STRING", 
		"WS"
	];
	public static readonly VOCABULARY: Vocabulary = new VocabularyImpl(DiscoverySyntaxLexer._LITERAL_NAMES, DiscoverySyntaxLexer._SYMBOLIC_NAMES, []);

	@Override
	@NotNull
	public get vocabulary(): Vocabulary {
		return DiscoverySyntaxLexer.VOCABULARY;
	}


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(DiscoverySyntaxLexer._ATN, this);
	}

	@Override
	public get grammarFileName(): string { return "DiscoverySyntax.g4"; }

	@Override
	public get ruleNames(): string[] { return DiscoverySyntaxLexer.ruleNames; }

	@Override
	public get serializedATN(): string { return DiscoverySyntaxLexer._serializedATN; }

	@Override
	public get modeNames(): string[] { return DiscoverySyntaxLexer.modeNames; }

	public static readonly _serializedATN: string =
		"\x03\uAF6F\u8320\u479D\uB75C\u4880\u1605\u191C\uAB37\x02\x0Fm\b\x01\x04"+
		"\x02\t\x02\x04\x03\t\x03\x04\x04\t\x04\x04\x05\t\x05\x04\x06\t\x06\x04"+
		"\x07\t\x07\x04\b\t\b\x04\t\t\t\x04\n\t\n\x04\v\t\v\x04\f\t\f\x04\r\t\r"+
		"\x04\x0E\t\x0E\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02"+
		"\x03\x02\x03\x02\x03\x02\x03\x02\x03\x02\x03\x03\x03\x03\x03\x04\x03\x04"+
		"\x03\x05\x03\x05\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x06\x03\x07"+
		"\x03\x07\x03\x07\x03\x07\x03\x07\x03\b\x03\b\x03\t\x03\t\x03\t\x03\t\x03"+
		"\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\n\x03\v\x03\v\x07"+
		"\vM\n\v\f\v\x0E\vP\v\v\x03\v\x03\v\x07\vT\n\v\f\v\x0E\vW\v\v\x03\v\x03"+
		"\v\x03\f\x03\f\x03\f\x03\f\x03\f\x03\f\x03\r\x03\r\x07\rc\n\r\f\r\x0E"+
		"\rf\v\r\x03\r\x03\r\x03\x0E\x03\x0E\x03\x0E\x03\x0E\x04NU\x02\x02\x0F"+
		"\x03\x02\x03\x05\x02\x04\x07\x02\x05\t\x02\x06\v\x02\x07\r\x02\b\x0F\x02"+
		"\t\x11\x02\n\x13\x02\v\x15\x02\f\x17\x02\r\x19\x02\x0E\x1B\x02\x0F\x03"+
		"\x02\x05\x03\x02<<\x03\x02$$\x05\x02\v\f\x0F\x0F\"\"o\x02\x03\x03\x02"+
		"\x02\x02\x02\x05\x03\x02\x02\x02\x02\x07\x03\x02\x02\x02\x02\t\x03\x02"+
		"\x02\x02\x02\v\x03\x02\x02\x02\x02\r\x03\x02\x02\x02\x02\x0F\x03\x02\x02"+
		"\x02\x02\x11\x03\x02\x02\x02\x02\x13\x03\x02\x02\x02\x02\x15\x03\x02\x02"+
		"\x02\x02\x17\x03\x02\x02\x02\x02\x19\x03\x02\x02\x02\x02\x1B\x03\x02\x02"+
		"\x02\x03\x1D\x03\x02\x02\x02\x05)\x03\x02\x02\x02\x07+\x03\x02\x02\x02"+
		"\t-\x03\x02\x02\x02\v/\x03\x02\x02\x02\r5\x03\x02\x02\x02\x0F:\x03\x02"+
		"\x02\x02\x11<\x03\x02\x02\x02\x13@\x03\x02\x02\x02\x15J\x03\x02\x02\x02"+
		"\x17Z\x03\x02\x02\x02\x19`\x03\x02\x02\x02\x1Bi\x03\x02\x02\x02\x1D\x1E"+
		"\x07U\x02\x02\x1E\x1F\x07w\x02\x02\x1F \x07d\x02\x02 !\x07E\x02\x02!\""+
		"\x07n\x02\x02\"#\x07c\x02\x02#$\x07u\x02\x02$%\x07u\x02\x02%&\x07Q\x02"+
		"\x02&\'\x07h\x02\x02\'(\x07\"\x02\x02(\x04\x03\x02\x02\x02)*\x07.\x02"+
		"\x02*\x06\x03\x02\x02\x02+,\x07*\x02\x02,\b\x03\x02\x02\x02-.\x07+\x02"+
		"\x02.\n\x03\x02\x02\x02/0\x07\"\x02\x0201\x07C\x02\x0212\x07P\x02\x02"+
		"23\x07F\x02\x0234\x07\"\x02\x024\f\x03\x02\x02\x0256\x07\"\x02\x0267\x07"+
		"Q\x02\x0278\x07T\x02\x0289\x07\"\x02\x029\x0E\x03\x02\x02\x02:;\x07#\x02"+
		"\x02;\x10\x03\x02\x02\x02<=\x07\"\x02\x02=>\x07?\x02\x02>?\x07\"\x02\x02"+
		"?\x12\x03\x02\x02\x02@A\x07R\x02\x02AB\x07T\x02\x02BC\x07Q\x02\x02CD\x07"+
		"R\x02\x02DE\x07G\x02\x02EF\x07T\x02\x02FG\x07V\x02\x02GH\x07[\x02\x02"+
		"HI\x07*\x02\x02I\x14\x03\x02\x02\x02JN\x07$\x02\x02KM\n\x02\x02\x02LK"+
		"\x03\x02\x02\x02MP\x03\x02\x02\x02NO\x03\x02\x02\x02NL\x03\x02\x02\x02"+
		"OQ\x03\x02\x02\x02PN\x03\x02\x02\x02QU\x07<\x02\x02RT\n\x02\x02\x02SR"+
		"\x03\x02\x02\x02TW\x03\x02\x02\x02UV\x03\x02\x02\x02US\x03\x02\x02\x02"+
		"VX\x03\x02\x02\x02WU\x03\x02\x02\x02XY\x07$\x02\x02Y\x16\x03\x02\x02\x02"+
		"Z[\x07u\x02\x02[\\\x07q\x02\x02\\]\x07o\x02\x02]^\x07g\x02\x02^_\x07\""+
		"\x02\x02_\x18\x03\x02\x02\x02`d\x07$\x02\x02ac\n\x03\x02\x02ba\x03\x02"+
		"\x02\x02cf\x03\x02\x02\x02db\x03\x02\x02\x02de\x03\x02\x02\x02eg\x03\x02"+
		"\x02\x02fd\x03\x02\x02\x02gh\x07$\x02\x02h\x1A\x03\x02\x02\x02ij\t\x04"+
		"\x02\x02jk\x03\x02\x02\x02kl\b\x0E\x02\x02l\x1C\x03\x02\x02\x02\x06\x02"+
		"NUd\x03\b\x02\x02";
	public static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!DiscoverySyntaxLexer.__ATN) {
			DiscoverySyntaxLexer.__ATN = new ATNDeserializer().deserialize(Utils.toCharArray(DiscoverySyntaxLexer._serializedATN));
		}

		return DiscoverySyntaxLexer.__ATN;
	}

}

